#pragma once
#include "stdafx.h"
#include <vector>

using namespace System;

Object^ GetComObjectFromObjRef(String^ objref);
Object^ GetComObject(Guid clsid);
Object^ WrapComObject(void*);
bool RunCOMEquals(Object^ targetObj, Object^ equalsObj);
array<unsigned char>^ GetArrayFromBuffer(unsigned char* buf, int length);
array<unsigned char>^ MarshalObject(IUnknown* pUnk);
bool IsObject(VARIANT& v);
variant_t ConvertObjectToVariant(Object^ obj);
HRESULT InvokeDispatch(IDispatchPtr pDisp, bstr_t name, std::vector<variant_t>& args, variant_t& vret);
SAFEARRAY* GetArguments(std::vector<variant_t>& args);
HRESULT GetPropertyDispatch(IDispatchPtr pDisp, bstr_t name, std::vector<variant_t>& args, variant_t& vret);
String^ VariantAsString(variant_t v);